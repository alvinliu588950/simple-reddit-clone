{"version":3,"sources":["logo.svg","components/Topics.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Topics","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topics","content","isLoading","handleInputChange","bind","assertThisInitialized","addTopics","upvote","downvote","event","target","value","name","setState","defineProperty","fetchTopics","_this2","react_default","a","createElement","className","type","placeholder","checked","onChange","onClick","map","item","index","key","Id","Votes","Content","self","axios","get","then","resp","data","catch","err","alert","method","url","id","Component","App","components_Topics","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.353ed626.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport axios from 'axios';\nimport '../css/Topics.css'\n\nclass Topics extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            topics: [],\n            content: \"\",\n            isLoading: false\n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.addTopics = this.addTopics.bind(this);\n        this.upvote = this.upvote.bind(this);        \n        this.downvote = this.downvote.bind(this);\n    }\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n    componentDidMount() {\n        this.fetchTopics()\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"columns\">\n                    <div className=\"column is-6 is-offset-3\">\n                        <h1 className=\"title has-text-centered\">Topics</h1>\n                    </div>\n                </div>\n                <div className=\"columns\">\n                    <div className=\"column is-6 is-offset-3\">\n                        <form>\n                            <div className=\"field\">\n                                <label className=\"label\">New Topic</label>\n                                <div className=\"control\">\n                                    <input \n                                        className=\"input\" \n                                        type=\"text\" \n                                        placeholder=\"Text input\"\n                                        name=\"content\"\n                                        checked={this.state.content}\n                                        onChange={this.handleInputChange}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <div className=\"control has-text-right\">\n                                    <button \n                                        className=\"button is-link\" \n                                        type=\"button\"\n                                        onClick={() => this.addTopics()}\n                                        >Add\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <div className=\"columns\">\n                    <div className=\"column is-6 is-offset-3\">\n                        { this.state.isLoading ? \n                            (\n                                <p className=\"has-text-centered\">\n                                    <i className=\"fas fa-circle-notch fa-spin loading\"></i>\n                                </p>):\n                            (\n                                this.state.topics.map((item, index) => (\n                                    <div className=\"card\" key={index}>\n                                        <header className=\"card-header\">\n                                            <p className=\"card-header-title\">Topic number: {item.Id} </p>\n                                        </header>\n                                        <div className=\"card-content\">\n                                            <div className=\"vote\">\n                                                <button className=\"button is-light\"  onClick={() => this.upvote(item.Id)}>\n                                                    <i className=\"fas fa-arrow-up\"></i>\n                                                </button>\n                                                <p>{item.Votes}</p>\n                                                <button className=\"button is-light\" onClick={() => this.downvote(item.Id)}>\n                                                    <i className=\"fas fa-arrow-down\" ></i>\n                                                </button>                                    \n                                            </div>\n                                            <div className=\"content\">\n                                                <p>{item.Content}</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            )\n                        }\n                    </div>\n                </div>\n            </div>          \n        );\n    }\n    fetchTopics() {\n        let self = this;\n        self.setState({ \n            isLoading: true\n        });\n        axios.get('/api/v1/topics')\n            .then((resp) => {\n                self.setState({ \n                    topics: resp.data.topics\n                });\n                self.setState({ \n                    isLoading: false\n                });\n            })\n            .catch((err) => {\n                alert('Something went wrong.Please check your network or contact us.')\n            })\n    }\n    addTopics() {\n        let self = this;\n        self.setState({ \n            isLoading: true\n        });        \n        axios({\n            method: 'post',\n            url: '/api/v1/topics/add',\n            data: {\n                content: self.state.content\n            }\n        })\n        .then((resp) => {\n            self.fetchTopics()\n        })\n        .catch((err) => {\n            alert('Something went wrong.Please check your network or contact us.')\n        })      \n    }\n    upvote(id) {\n        let self = this;\n        self.setState({ \n            isLoading: true\n        });        \n        axios({\n            method: 'patch',\n            url: '/api/v1/topics/upvote',\n            data: {\n                id: id\n            }\n        })\n        .then((resp) => {\n            // after user vote, the page should display the updated list of topics\n            self.fetchTopics()\n        })\n        .catch((err) => {\n            alert('Something went wrong.Please check your network or contact us.')\n        })     \n    }\n    downvote(id) {\n        let self = this;\n        self.setState({ \n            isLoading: true\n        });\n        axios({\n            method: 'patch',\n            url: '/api/v1/topics/downvote',\n            data: {\n                id: id\n            }\n        })\n        .then((resp) => {\n            // after user vote, the page should display shows the updated list of topics\n            self.fetchTopics()\n        })\n        .catch((err) => {\n            alert('Something went wrong.Please check your network or contact us.')\n        })     \n    }\n}\n\nexport default Topics;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport Topics from './components/Topics'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Topics/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}